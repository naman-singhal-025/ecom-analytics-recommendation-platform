# Spring Application Name
spring.application.name=ecom-backend

# MongoDB Configuration
# Connects to the MongoDB instance running in Docker
# URI format: mongodb://<username>:<password>@<host>:<port>/<database>
spring.data.mongodb.uri=mongodb://admin:password@localhost:27017/ecommerce?authSource=admin
# could omit the spring.data.mongodb.database as it is already part of the URI, but itâ€™s fine to specify both.
spring.data.mongodb.database=ecommerce

# Kafka Configuration
# Points to the Kafka broker in the Docker network
spring.kafka.bootstrap-servers=localhost:9092

# Kafka Producer Configuration
# Specifies how to serialize the key and value of the Kafka message
# Key serializer: turns the Kafka message key into a string.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Value serializer: converts the Java object (e.g., UserEvent) into JSON format
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Custom Properties
# Defines the Kafka topic for user events
kafka.topic.user-events=user-events

# Elasticsearch Configuration
spring.elasticsearch.uris=http://localhost:9200

# Redis Configuration
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Allow Bean Definition Overriding
# This is necessary because we have multiple Spring Data modules (MongoDB, Elasticsearch)
# that may try to create beans with the same name.
spring.main.allow-bean-definition-overriding=true